// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          String         @default("user") // "admin" or "user"
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?        @default("United States")
  wishlistItems WishlistItem[]
  orders        Order[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id            String         @id @default(cuid())
  title         String
  slug          String         @unique
  description   String
  price         Float
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  images        Image[]
  featured      Boolean        @default(false)
  condition     String?        // "Fine", "Very Good", "Good", "Fair"
  year          String?
  artist        String?
  medium        String?        // For art
  period        String?        // Historical period
  status        String         @default("active") // "active", "sold", "pending"
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([categoryId])
  @@index([createdAt])
  @@index([featured])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Int      @default(0)
  createdAt DateTime @default(now())

  @@index([productId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  user            User?       @relation(fields: [userId], references: [id])
  userId          String?
  items           OrderItem[]
  status          String      @default("pending") // "pending", "processing", "shipped", "delivered", "cancelled"
  subtotal        Float
  tax             Float
  shipping        Float       @default(0)
  total           Float
  customerName    String?
  customerEmail   String?
  customerPhone   String?
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String
  shippingCountry String
  trackingNumber  String?
  shippingLabelUrl String?
  carrier         String?     // "USPS", "UPS", "FedEx", etc.
  paymentMethod   String?
  paymentStatus   String      @default("pending") // "pending", "paid", "failed"
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  title     String // Store product title at time of order
  price     Float // Store price at time of order
  quantity  Int
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}
